
AVR_APA102.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000007b8  0000084c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f3  00800100  00800100  0000084c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000084c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  0000087c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d6f  00000000  00000000  00000914  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000452  00000000  00000000  00001683  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004b7  00000000  00000000  00001ad5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000035c  00000000  00000000  00001f8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e0  00000000  00000000  000022e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001f81  00000000  00000000  000026c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00004649  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 3f       	cpi	r26, 0xF3	; 243
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 da 03 	jmp	0x7b4	; 0x7b4 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

// uint8_t array for doing RGB/HSV calcs.
uint8_t rgb[3] = {0,0,0};

int main(void)
{
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	1f 92       	push	r1
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	0f 2e       	mov	r0, r31
  9c:	f5 e0       	ldi	r31, 0x05	; 5
  9e:	8f 2e       	mov	r8, r31
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	9f 2e       	mov	r9, r31
  a4:	f0 2d       	mov	r31, r0
	double sat = 1.0;
	double var = 1.0;
	while(1)
	{
		
		for(int count = 0; count < numLEDs; count +=1)
  a6:	61 2c       	mov	r6, r1
  a8:	71 2c       	mov	r7, r1
		{
			double ledHue = (1.0/numLEDs)*count;
			rgbConv.hsvToRgb(ledHue, sat, var, rgb);
			ledFrame[count].r = rgb[0];
			ledFrame[count].g = rgb[1];
  aa:	0f 2e       	mov	r0, r31
  ac:	f1 e0       	ldi	r31, 0x01	; 1
  ae:	4f 2e       	mov	r4, r31
  b0:	f1 e0       	ldi	r31, 0x01	; 1
  b2:	5f 2e       	mov	r5, r31
  b4:	f0 2d       	mov	r31, r0
			ledFrame[count].b = rgb[2];
  b6:	0f 2e       	mov	r0, r31
  b8:	f2 e0       	ldi	r31, 0x02	; 2
  ba:	2f 2e       	mov	r2, r31
  bc:	f1 e0       	ldi	r31, 0x01	; 1
  be:	3f 2e       	mov	r3, r31
  c0:	f0 2d       	mov	r31, r0
	while(1)
	{
		
		for(int count = 0; count < numLEDs; count +=1)
		{
			double ledHue = (1.0/numLEDs)*count;
  c2:	b3 01       	movw	r22, r6
  c4:	88 27       	eor	r24, r24
  c6:	77 fd       	sbrc	r23, 7
  c8:	80 95       	com	r24
  ca:	98 2f       	mov	r25, r24
  cc:	0e 94 c3 02 	call	0x586	; 0x586 <__floatsisf>
  d0:	2d ec       	ldi	r18, 0xCD	; 205
  d2:	3c ec       	ldi	r19, 0xCC	; 204
  d4:	4c e4       	ldi	r20, 0x4C	; 76
  d6:	5c e3       	ldi	r21, 0x3C	; 60
  d8:	0e 94 4f 03 	call	0x69e	; 0x69e <__mulsf3>
  dc:	ab 01       	movw	r20, r22
  de:	bc 01       	movw	r22, r24
			rgbConv.hsvToRgb(ledHue, sat, var, rgb);
  e0:	0f 2e       	mov	r0, r31
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	af 2e       	mov	r10, r31
  e6:	f1 e0       	ldi	r31, 0x01	; 1
  e8:	bf 2e       	mov	r11, r31
  ea:	f0 2d       	mov	r31, r0
  ec:	0f 2e       	mov	r0, r31
  ee:	c1 2c       	mov	r12, r1
  f0:	d1 2c       	mov	r13, r1
  f2:	f0 e8       	ldi	r31, 0x80	; 128
  f4:	ef 2e       	mov	r14, r31
  f6:	ff e3       	ldi	r31, 0x3F	; 63
  f8:	ff 2e       	mov	r15, r31
  fa:	f0 2d       	mov	r31, r0
  fc:	97 01       	movw	r18, r14
  fe:	86 01       	movw	r16, r12
 100:	ce 01       	movw	r24, r28
 102:	01 96       	adiw	r24, 0x01	; 1
 104:	0e 94 ff 00 	call	0x1fe	; 0x1fe <_ZN12RGBConverter8hsvToRgbEdddPh>
			ledFrame[count].r = rgb[0];
 108:	80 91 00 01 	lds	r24, 0x0100
 10c:	d4 01       	movw	r26, r8
 10e:	8c 93       	st	X, r24
 110:	f4 01       	movw	r30, r8
 112:	31 97       	sbiw	r30, 0x01	; 1
			ledFrame[count].g = rgb[1];
 114:	d2 01       	movw	r26, r4
 116:	8c 91       	ld	r24, X
 118:	80 83       	st	Z, r24
 11a:	31 97       	sbiw	r30, 0x01	; 1
			ledFrame[count].b = rgb[2];
 11c:	d1 01       	movw	r26, r2
 11e:	8c 91       	ld	r24, X
 120:	80 83       	st	Z, r24
	double sat = 1.0;
	double var = 1.0;
	while(1)
	{
		
		for(int count = 0; count < numLEDs; count +=1)
 122:	bf ef       	ldi	r27, 0xFF	; 255
 124:	6b 1a       	sub	r6, r27
 126:	7b 0a       	sbc	r7, r27
 128:	e3 e0       	ldi	r30, 0x03	; 3
 12a:	8e 0e       	add	r8, r30
 12c:	91 1c       	adc	r9, r1
 12e:	f0 e5       	ldi	r31, 0x50	; 80
 130:	6f 16       	cp	r6, r31
 132:	71 04       	cpc	r7, r1
 134:	31 f6       	brne	.-116    	; 0xc2 <main+0x32>
			rgbConv.hsvToRgb(ledHue, sat, var, rgb);
			ledFrame[count].r = rgb[0];
			ledFrame[count].g = rgb[1];
			ledFrame[count].b = rgb[2];
		}
		apa102_setleds(ledFrame, numLEDs);
 136:	60 e5       	ldi	r22, 0x50	; 80
 138:	70 e0       	ldi	r23, 0x00	; 0
 13a:	83 e0       	ldi	r24, 0x03	; 3
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	0e 94 b0 00 	call	0x160	; 0x160 <apa102_setleds>
 142:	ff cf       	rjmp	.-2      	; 0x142 <main+0xb2>

00000144 <SPI_write>:
  apa102_DDRREG  |=  _BV(apa102_clk);
  apa102_PORTREG &= ~_BV(apa102_clk);  // initial state of clk is low
}

// Assumed state before call: SCK- Low, MOSI- High
void SPI_write(uint8_t c) {
 144:	98 e0       	ldi	r25, 0x08	; 8
  uint8_t i;
  for (i=0; i<8 ;i++)
  {
    if (!(c&0x80)) {
 146:	88 23       	and	r24, r24
 148:	14 f0       	brlt	.+4      	; 0x14e <SPI_write+0xa>
      apa102_PORTREG &= ~_BV(apa102_data); // set data low
 14a:	2a 98       	cbi	0x05, 2	; 5
 14c:	01 c0       	rjmp	.+2      	; 0x150 <SPI_write+0xc>
    } else {
      apa102_PORTREG |=  _BV(apa102_data); // set data high
 14e:	2a 9a       	sbi	0x05, 2	; 5
    }     
  
  apa102_PORTREG |= (1<< apa102_clk); // SCK hi , data sampled here
 150:	28 9a       	sbi	0x05, 0	; 5

  c<<=1;
 152:	88 0f       	add	r24, r24
  
  nop();  // Stretch clock
 154:	00 00       	nop
  nop();
 156:	00 00       	nop
  
  apa102_PORTREG &= ~_BV(apa102_clk); // clk low
 158:	28 98       	cbi	0x05, 0	; 5
 15a:	91 50       	subi	r25, 0x01	; 1
}

// Assumed state before call: SCK- Low, MOSI- High
void SPI_write(uint8_t c) {
  uint8_t i;
  for (i=0; i<8 ;i++)
 15c:	a1 f7       	brne	.-24     	; 0x146 <SPI_write+0x2>
  nop();
  
  apa102_PORTREG &= ~_BV(apa102_clk); // clk low
  }
// State after call: SCK Low, Dat high
}
 15e:	08 95       	ret

00000160 <apa102_setleds>:
 
void inline apa102_setleds(struct cRGB *ledarray, uint16_t leds)
{
 160:	cf 92       	push	r12
 162:	df 92       	push	r13
 164:	ef 92       	push	r14
 166:	ff 92       	push	r15
 168:	0f 93       	push	r16
 16a:	1f 93       	push	r17
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	ec 01       	movw	r28, r24
 172:	7b 01       	movw	r14, r22
  bad cabling. If you want more speed, you should adapt this code to use
  hardware SPI.
*/

inline void SPI_init(void) {
  apa102_DDRREG  |=  _BV(apa102_data);
 174:	22 9a       	sbi	0x04, 2	; 4
  apa102_DDRREG  |=  _BV(apa102_clk);
 176:	20 9a       	sbi	0x04, 0	; 4
  apa102_PORTREG &= ~_BV(apa102_clk);  // initial state of clk is low
 178:	28 98       	cbi	0x05, 0	; 5
{
  uint16_t i;
  uint8_t *rawarray=(uint8_t*)ledarray;
  SPI_init();
  
  SPI_write(0x00);  // Start Frame
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	0e 94 a2 00 	call	0x144	; 0x144 <SPI_write>
  SPI_write(0x00);
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	0e 94 a2 00 	call	0x144	; 0x144 <SPI_write>
  SPI_write(0x00);
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	0e 94 a2 00 	call	0x144	; 0x144 <SPI_write>
  SPI_write(0x00);
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	0e 94 a2 00 	call	0x144	; 0x144 <SPI_write>
 
  for (i=0; i<(leds+leds+leds); i+=3)
 192:	67 01       	movw	r12, r14
 194:	cc 0c       	add	r12, r12
 196:	dd 1c       	adc	r13, r13
 198:	ce 0c       	add	r12, r14
 19a:	df 1c       	adc	r13, r15
 19c:	c1 14       	cp	r12, r1
 19e:	d1 04       	cpc	r13, r1
 1a0:	c9 f0       	breq	.+50     	; 0x1d4 <apa102_setleds+0x74>
 1a2:	22 96       	adiw	r28, 0x02	; 2
 1a4:	00 e0       	ldi	r16, 0x00	; 0
 1a6:	10 e0       	ldi	r17, 0x00	; 0
  {
    SPI_write(0xff);  // Maximum global brightness
 1a8:	8f ef       	ldi	r24, 0xFF	; 255
 1aa:	0e 94 a2 00 	call	0x144	; 0x144 <SPI_write>
 1ae:	fe 01       	movw	r30, r28
 1b0:	32 97       	sbiw	r30, 0x02	; 2
    SPI_write(rawarray[i+0]);
 1b2:	80 81       	ld	r24, Z
 1b4:	0e 94 a2 00 	call	0x144	; 0x144 <SPI_write>
 1b8:	fe 01       	movw	r30, r28
 1ba:	31 97       	sbiw	r30, 0x01	; 1
    SPI_write(rawarray[i+1]);
 1bc:	80 81       	ld	r24, Z
 1be:	0e 94 a2 00 	call	0x144	; 0x144 <SPI_write>
    SPI_write(rawarray[i+2]);
 1c2:	88 81       	ld	r24, Y
 1c4:	0e 94 a2 00 	call	0x144	; 0x144 <SPI_write>
  SPI_write(0x00);  // Start Frame
  SPI_write(0x00);
  SPI_write(0x00);
  SPI_write(0x00);
 
  for (i=0; i<(leds+leds+leds); i+=3)
 1c8:	0d 5f       	subi	r16, 0xFD	; 253
 1ca:	1f 4f       	sbci	r17, 0xFF	; 255
 1cc:	23 96       	adiw	r28, 0x03	; 3
 1ce:	0c 15       	cp	r16, r12
 1d0:	1d 05       	cpc	r17, r13
 1d2:	50 f3       	brcs	.-44     	; 0x1a8 <apa102_setleds+0x48>
    SPI_write(rawarray[i+1]);
    SPI_write(rawarray[i+2]);
  }
  
  // End frame: 8+8*(leds >> 4) clock cycles    
  for (i=0; i<leds; i+=16)
 1d4:	e1 14       	cp	r14, r1
 1d6:	f1 04       	cpc	r15, r1
 1d8:	49 f0       	breq	.+18     	; 0x1ec <apa102_setleds+0x8c>
 1da:	c0 e0       	ldi	r28, 0x00	; 0
 1dc:	d0 e0       	ldi	r29, 0x00	; 0
  {
    SPI_write(0xff);  // 8 more clock cycles
 1de:	8f ef       	ldi	r24, 0xFF	; 255
 1e0:	0e 94 a2 00 	call	0x144	; 0x144 <SPI_write>
    SPI_write(rawarray[i+1]);
    SPI_write(rawarray[i+2]);
  }
  
  // End frame: 8+8*(leds >> 4) clock cycles    
  for (i=0; i<leds; i+=16)
 1e4:	60 96       	adiw	r28, 0x10	; 16
 1e6:	ce 15       	cp	r28, r14
 1e8:	df 05       	cpc	r29, r15
 1ea:	c8 f3       	brcs	.-14     	; 0x1de <apa102_setleds+0x7e>
  {
    SPI_write(0xff);  // 8 more clock cycles
  }
}
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	1f 91       	pop	r17
 1f2:	0f 91       	pop	r16
 1f4:	ff 90       	pop	r15
 1f6:	ef 90       	pop	r14
 1f8:	df 90       	pop	r13
 1fa:	cf 90       	pop	r12
 1fc:	08 95       	ret

000001fe <_ZN12RGBConverter8hsvToRgbEdddPh>:
    double h, s, l = (max + min) / 2;

    if (max == min) {
        h = s = 0; // achromatic
    } else {
        double d = max - min;
 1fe:	2f 92       	push	r2
 200:	3f 92       	push	r3
 202:	4f 92       	push	r4
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
 204:	5f 92       	push	r5
 206:	6f 92       	push	r6
 208:	7f 92       	push	r7
 20a:	8f 92       	push	r8
 20c:	9f 92       	push	r9
 20e:	af 92       	push	r10
 210:	bf 92       	push	r11
 212:	cf 92       	push	r12
 214:	df 92       	push	r13
 216:	ef 92       	push	r14
 218:	ff 92       	push	r15
 21a:	0f 93       	push	r16
 21c:	1f 93       	push	r17
 21e:	cf 93       	push	r28
 220:	df 93       	push	r29
 222:	cd b7       	in	r28, 0x3d	; 61
 224:	de b7       	in	r29, 0x3e	; 62
 226:	28 97       	sbiw	r28, 0x08	; 8
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	f8 94       	cli
 22c:	de bf       	out	0x3e, r29	; 62
 22e:	0f be       	out	0x3f, r0	; 63
 230:	cd bf       	out	0x3d, r28	; 61
 232:	cb 01       	movw	r24, r22
 234:	ba 01       	movw	r22, r20
 236:	28 01       	movw	r4, r16
 238:	39 01       	movw	r6, r18
 23a:	b8 86       	std	Y+8, r11	; 0x08
 23c:	af 82       	std	Y+7, r10	; 0x07
 23e:	20 e0       	ldi	r18, 0x00	; 0
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	40 ec       	ldi	r20, 0xC0	; 192
 244:	50 e4       	ldi	r21, 0x40	; 64
 246:	0e 94 4f 03 	call	0x69e	; 0x69e <__mulsf3>
 24a:	4b 01       	movw	r8, r22
 24c:	5c 01       	movw	r10, r24
 24e:	0e 94 90 02 	call	0x520	; 0x520 <__fixsfsi>
 252:	8b 01       	movw	r16, r22
 254:	88 27       	eor	r24, r24
 256:	77 fd       	sbrc	r23, 7
 258:	80 95       	com	r24
        if (max == rd) {
 25a:	98 2f       	mov	r25, r24
 25c:	0e 94 c3 02 	call	0x586	; 0x586 <__floatsisf>
 260:	9b 01       	movw	r18, r22
 262:	ac 01       	movw	r20, r24
 264:	c5 01       	movw	r24, r10
 266:	b4 01       	movw	r22, r8
 268:	0e 94 2b 02 	call	0x456	; 0x456 <__subsf3>
 26c:	4b 01       	movw	r8, r22
 26e:	5c 01       	movw	r10, r24
 270:	a3 01       	movw	r20, r6
            h = (gd - bd) / d + (gd < bd ? 6 : 0);
 272:	92 01       	movw	r18, r4
 274:	60 e0       	ldi	r22, 0x00	; 0
 276:	70 e0       	ldi	r23, 0x00	; 0
 278:	80 e8       	ldi	r24, 0x80	; 128
 27a:	9f e3       	ldi	r25, 0x3F	; 63
 27c:	0e 94 2b 02 	call	0x456	; 0x456 <__subsf3>
 280:	2c 2d       	mov	r18, r12
 282:	3d 2d       	mov	r19, r13
 284:	4e 2d       	mov	r20, r14
 286:	5f 2d       	mov	r21, r15
 288:	0e 94 4f 03 	call	0x69e	; 0x69e <__mulsf3>
 28c:	26 2e       	mov	r2, r22
 28e:	37 2e       	mov	r3, r23
 290:	89 83       	std	Y+1, r24	; 0x01
 292:	9a 83       	std	Y+2, r25	; 0x02
 294:	a3 01       	movw	r20, r6
 296:	92 01       	movw	r18, r4
 298:	c5 01       	movw	r24, r10
 29a:	b4 01       	movw	r22, r8
 29c:	0e 94 4f 03 	call	0x69e	; 0x69e <__mulsf3>
 2a0:	9b 01       	movw	r18, r22
 2a2:	ac 01       	movw	r20, r24
 2a4:	60 e0       	ldi	r22, 0x00	; 0
 2a6:	70 e0       	ldi	r23, 0x00	; 0
 2a8:	80 e8       	ldi	r24, 0x80	; 128
 2aa:	9f e3       	ldi	r25, 0x3F	; 63
 2ac:	0e 94 2b 02 	call	0x456	; 0x456 <__subsf3>
 2b0:	2c 2d       	mov	r18, r12
 2b2:	3d 2d       	mov	r19, r13
 2b4:	4e 2d       	mov	r20, r14
 2b6:	5f 2d       	mov	r21, r15
 2b8:	0e 94 4f 03 	call	0x69e	; 0x69e <__mulsf3>
 2bc:	6b 83       	std	Y+3, r22	; 0x03
 2be:	7c 83       	std	Y+4, r23	; 0x04
 2c0:	8d 83       	std	Y+5, r24	; 0x05
 2c2:	9e 83       	std	Y+6, r25	; 0x06
 2c4:	a5 01       	movw	r20, r10
 2c6:	94 01       	movw	r18, r8
 2c8:	60 e0       	ldi	r22, 0x00	; 0
 2ca:	70 e0       	ldi	r23, 0x00	; 0
        } else if (max == gd) {
 2cc:	80 e8       	ldi	r24, 0x80	; 128
 2ce:	9f e3       	ldi	r25, 0x3F	; 63
 2d0:	0e 94 2b 02 	call	0x456	; 0x456 <__subsf3>
 2d4:	a3 01       	movw	r20, r6
 2d6:	92 01       	movw	r18, r4
 2d8:	0e 94 4f 03 	call	0x69e	; 0x69e <__mulsf3>
 2dc:	9b 01       	movw	r18, r22
 2de:	ac 01       	movw	r20, r24
 2e0:	60 e0       	ldi	r22, 0x00	; 0
 2e2:	70 e0       	ldi	r23, 0x00	; 0
            h = (bd - rd) / d + 2;
 2e4:	80 e8       	ldi	r24, 0x80	; 128
 2e6:	9f e3       	ldi	r25, 0x3F	; 63
 2e8:	0e 94 2b 02 	call	0x456	; 0x456 <__subsf3>
 2ec:	2c 2d       	mov	r18, r12
 2ee:	3d 2d       	mov	r19, r13
 2f0:	4e 2d       	mov	r20, r14
 2f2:	5f 2d       	mov	r21, r15
 2f4:	0e 94 4f 03 	call	0x69e	; 0x69e <__mulsf3>
 2f8:	b6 2e       	mov	r11, r22
 2fa:	a7 2e       	mov	r10, r23
 2fc:	98 2e       	mov	r9, r24
 2fe:	89 2e       	mov	r8, r25
 300:	c8 01       	movw	r24, r16
 302:	66 e0       	ldi	r22, 0x06	; 6
 304:	70 e0       	ldi	r23, 0x00	; 0
 306:	0e 94 b2 03 	call	0x764	; 0x764 <__divmodhi4>
 30a:	82 30       	cpi	r24, 0x02	; 2
 30c:	91 05       	cpc	r25, r1
 30e:	f9 f0       	breq	.+62     	; 0x34e <_ZN12RGBConverter8hsvToRgbEdddPh+0x150>
 310:	34 f4       	brge	.+12     	; 0x31e <_ZN12RGBConverter8hsvToRgbEdddPh+0x120>
 312:	00 97       	sbiw	r24, 0x00	; 0
 314:	09 f4       	brne	.+2      	; 0x318 <_ZN12RGBConverter8hsvToRgbEdddPh+0x11a>
        } else if (max == bd) {
 316:	55 c0       	rjmp	.+170    	; 0x3c2 <_ZN12RGBConverter8hsvToRgbEdddPh+0x1c4>
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	a1 f0       	breq	.+40     	; 0x344 <_ZN12RGBConverter8hsvToRgbEdddPh+0x146>
 31c:	06 c0       	rjmp	.+12     	; 0x32a <_ZN12RGBConverter8hsvToRgbEdddPh+0x12c>
 31e:	84 30       	cpi	r24, 0x04	; 4
 320:	91 05       	cpc	r25, r1
 322:	99 f1       	breq	.+102    	; 0x38a <_ZN12RGBConverter8hsvToRgbEdddPh+0x18c>
 324:	1c f1       	brlt	.+70     	; 0x36c <_ZN12RGBConverter8hsvToRgbEdddPh+0x16e>
 326:	05 97       	sbiw	r24, 0x05	; 5
 328:	e9 f1       	breq	.+122    	; 0x3a4 <_ZN12RGBConverter8hsvToRgbEdddPh+0x1a6>
 32a:	21 2c       	mov	r2, r1
 32c:	31 2c       	mov	r3, r1
            h = (rd - gd) / d + 4;
 32e:	19 82       	std	Y+1, r1	; 0x01
 330:	1a 82       	std	Y+2, r1	; 0x02
 332:	b1 2c       	mov	r11, r1
 334:	a1 2c       	mov	r10, r1
 336:	91 2c       	mov	r9, r1
 338:	81 2c       	mov	r8, r1
 33a:	1b 82       	std	Y+3, r1	; 0x03
 33c:	1c 82       	std	Y+4, r1	; 0x04
 33e:	1d 82       	std	Y+5, r1	; 0x05
 340:	1e 82       	std	Y+6, r1	; 0x06
 342:	43 c0       	rjmp	.+134    	; 0x3ca <_ZN12RGBConverter8hsvToRgbEdddPh+0x1cc>
 344:	bc 2c       	mov	r11, r12
 346:	ad 2c       	mov	r10, r13
 348:	9e 2c       	mov	r9, r14
 34a:	8f 2c       	mov	r8, r15
 34c:	3e c0       	rjmp	.+124    	; 0x3ca <_ZN12RGBConverter8hsvToRgbEdddPh+0x1cc>
 34e:	2b 82       	std	Y+3, r2	; 0x03
 350:	3c 82       	std	Y+4, r3	; 0x04
 352:	89 81       	ldd	r24, Y+1	; 0x01
 354:	8d 83       	std	Y+5, r24	; 0x05
 356:	ea 81       	ldd	r30, Y+2	; 0x02
 358:	ee 83       	std	Y+6, r30	; 0x06
 35a:	2b 2c       	mov	r2, r11
 35c:	3a 2c       	mov	r3, r10
        }
        h /= 6;
 35e:	99 82       	std	Y+1, r9	; 0x01
 360:	8a 82       	std	Y+2, r8	; 0x02
 362:	bc 2c       	mov	r11, r12
 364:	ad 2c       	mov	r10, r13
 366:	9e 2c       	mov	r9, r14
 368:	8f 2c       	mov	r8, r15
 36a:	2f c0       	rjmp	.+94     	; 0x3ca <_ZN12RGBConverter8hsvToRgbEdddPh+0x1cc>
 36c:	bb 80       	ldd	r11, Y+3	; 0x03
 36e:	ac 80       	ldd	r10, Y+4	; 0x04
 370:	9d 80       	ldd	r9, Y+5	; 0x05
 372:	8e 80       	ldd	r8, Y+6	; 0x06
    double max = threeway_max(rd, gd, bd);
    double min = threeway_min(rd, gd, bd);
    double h, s, l = (max + min) / 2;

    if (max == min) {
        h = s = 0; // achromatic
 374:	2b 82       	std	Y+3, r2	; 0x03
 376:	3c 82       	std	Y+4, r3	; 0x04
 378:	f9 81       	ldd	r31, Y+1	; 0x01
 37a:	fd 83       	std	Y+5, r31	; 0x05
 37c:	8a 81       	ldd	r24, Y+2	; 0x02
        } else if (max == bd) {
            h = (rd - gd) / d + 4;
        }
        h /= 6;
    }
    hsl[0] = h;
 37e:	8e 83       	std	Y+6, r24	; 0x06
 380:	2c 2c       	mov	r2, r12
 382:	3d 2c       	mov	r3, r13
 384:	e9 82       	std	Y+1, r14	; 0x01
 386:	fa 82       	std	Y+2, r15	; 0x02
 388:	20 c0       	rjmp	.+64     	; 0x3ca <_ZN12RGBConverter8hsvToRgbEdddPh+0x1cc>
    hsl[1] = s;
 38a:	bb 82       	std	Y+3, r11	; 0x03
 38c:	ac 82       	std	Y+4, r10	; 0x04
 38e:	9d 82       	std	Y+5, r9	; 0x05
 390:	8e 82       	std	Y+6, r8	; 0x06
    hsl[2] = l;
 392:	b2 2c       	mov	r11, r2
 394:	a3 2c       	mov	r10, r3
 396:	99 80       	ldd	r9, Y+1	; 0x01
 398:	8a 80       	ldd	r8, Y+2	; 0x02
 39a:	2c 2c       	mov	r2, r12
    rgb[1] = g * 255;
    rgb[2] = b * 255;
}
 
double RGBConverter::threeway_max(double a, double b, double c) {
    return MAX(a, MAX(b, c));
 39c:	3d 2c       	mov	r3, r13
 39e:	e9 82       	std	Y+1, r14	; 0x01
 3a0:	fa 82       	std	Y+2, r15	; 0x02
 3a2:	13 c0       	rjmp	.+38     	; 0x3ca <_ZN12RGBConverter8hsvToRgbEdddPh+0x1cc>
 3a4:	b2 2c       	mov	r11, r2
 3a6:	a3 2c       	mov	r10, r3
 3a8:	99 80       	ldd	r9, Y+1	; 0x01
 3aa:	8a 80       	ldd	r8, Y+2	; 0x02
 3ac:	2b 80       	ldd	r2, Y+3	; 0x03
 3ae:	3c 80       	ldd	r3, Y+4	; 0x04
 3b0:	ed 81       	ldd	r30, Y+5	; 0x05
 3b2:	e9 83       	std	Y+1, r30	; 0x01
 3b4:	fe 81       	ldd	r31, Y+6	; 0x06
 3b6:	fa 83       	std	Y+2, r31	; 0x02
}

double RGBConverter::threeway_min(double a, double b, double c) {
    return MIN(a, MIN(b, c));
 3b8:	cb 82       	std	Y+3, r12	; 0x03
 3ba:	dc 82       	std	Y+4, r13	; 0x04
 3bc:	ed 82       	std	Y+5, r14	; 0x05
 3be:	fe 82       	std	Y+6, r15	; 0x06
 3c0:	04 c0       	rjmp	.+8      	; 0x3ca <_ZN12RGBConverter8hsvToRgbEdddPh+0x1cc>
 3c2:	cb 82       	std	Y+3, r12	; 0x03
 3c4:	dc 82       	std	Y+4, r13	; 0x04
 3c6:	ed 82       	std	Y+5, r14	; 0x05
 3c8:	fe 82       	std	Y+6, r15	; 0x06
 3ca:	20 e0       	ldi	r18, 0x00	; 0
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	4f e7       	ldi	r20, 0x7F	; 127
 3d0:	53 e4       	ldi	r21, 0x43	; 67
 3d2:	6b 81       	ldd	r22, Y+3	; 0x03
        h /= 6;
    }
    hsl[0] = h;
    hsl[1] = s;
    hsl[2] = l;
}
 3d4:	7c 81       	ldd	r23, Y+4	; 0x04
 3d6:	8d 81       	ldd	r24, Y+5	; 0x05
 3d8:	9e 81       	ldd	r25, Y+6	; 0x06
 3da:	0e 94 4f 03 	call	0x69e	; 0x69e <__mulsf3>
 3de:	0e 94 95 02 	call	0x52a	; 0x52a <__fixunssfsi>
 3e2:	ef 81       	ldd	r30, Y+7	; 0x07
 3e4:	f8 85       	ldd	r31, Y+8	; 0x08
 3e6:	60 83       	st	Z, r22
 3e8:	20 e0       	ldi	r18, 0x00	; 0
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	4f e7       	ldi	r20, 0x7F	; 127
 3ee:	53 e4       	ldi	r21, 0x43	; 67
 3f0:	6b 2d       	mov	r22, r11
 3f2:	7a 2d       	mov	r23, r10
 3f4:	89 2d       	mov	r24, r9
 3f6:	98 2d       	mov	r25, r8
 3f8:	0e 94 4f 03 	call	0x69e	; 0x69e <__mulsf3>
 3fc:	0e 94 95 02 	call	0x52a	; 0x52a <__fixunssfsi>
 400:	ef 81       	ldd	r30, Y+7	; 0x07
 402:	f8 85       	ldd	r31, Y+8	; 0x08
 404:	61 83       	std	Z+1, r22	; 0x01
        case 5: r = v, g = p, b = q; break;
    }

    rgb[0] = r * 255;
    rgb[1] = g * 255;
    rgb[2] = b * 255;
 406:	20 e0       	ldi	r18, 0x00	; 0
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	4f e7       	ldi	r20, 0x7F	; 127
 40c:	53 e4       	ldi	r21, 0x43	; 67
 40e:	62 2d       	mov	r22, r2
 410:	73 2d       	mov	r23, r3
 412:	89 81       	ldd	r24, Y+1	; 0x01
 414:	9a 81       	ldd	r25, Y+2	; 0x02
 416:	0e 94 4f 03 	call	0x69e	; 0x69e <__mulsf3>
 41a:	0e 94 95 02 	call	0x52a	; 0x52a <__fixunssfsi>
 41e:	ef 81       	ldd	r30, Y+7	; 0x07
 420:	f8 85       	ldd	r31, Y+8	; 0x08
 422:	62 83       	std	Z+2, r22	; 0x02
}
 424:	28 96       	adiw	r28, 0x08	; 8
 426:	0f b6       	in	r0, 0x3f	; 63
 428:	f8 94       	cli
 42a:	de bf       	out	0x3e, r29	; 62
 42c:	0f be       	out	0x3f, r0	; 63
 42e:	cd bf       	out	0x3d, r28	; 61
 430:	df 91       	pop	r29
 432:	cf 91       	pop	r28
 434:	1f 91       	pop	r17
 436:	0f 91       	pop	r16
 438:	ff 90       	pop	r15
 43a:	ef 90       	pop	r14
 43c:	df 90       	pop	r13
 43e:	cf 90       	pop	r12
 440:	bf 90       	pop	r11
 442:	af 90       	pop	r10
 444:	9f 90       	pop	r9
 446:	8f 90       	pop	r8
 448:	7f 90       	pop	r7
 44a:	6f 90       	pop	r6
 44c:	5f 90       	pop	r5
 44e:	4f 90       	pop	r4
 450:	3f 90       	pop	r3
 452:	2f 90       	pop	r2
 454:	08 95       	ret

00000456 <__subsf3>:
 456:	50 58       	subi	r21, 0x80	; 128

00000458 <__addsf3>:
 458:	bb 27       	eor	r27, r27
 45a:	aa 27       	eor	r26, r26
 45c:	0e d0       	rcall	.+28     	; 0x47a <__addsf3x>
 45e:	e5 c0       	rjmp	.+458    	; 0x62a <__fp_round>
 460:	d6 d0       	rcall	.+428    	; 0x60e <__fp_pscA>
 462:	30 f0       	brcs	.+12     	; 0x470 <__addsf3+0x18>
 464:	db d0       	rcall	.+438    	; 0x61c <__fp_pscB>
 466:	20 f0       	brcs	.+8      	; 0x470 <__addsf3+0x18>
 468:	31 f4       	brne	.+12     	; 0x476 <__addsf3+0x1e>
 46a:	9f 3f       	cpi	r25, 0xFF	; 255
 46c:	11 f4       	brne	.+4      	; 0x472 <__addsf3+0x1a>
 46e:	1e f4       	brtc	.+6      	; 0x476 <__addsf3+0x1e>
 470:	cb c0       	rjmp	.+406    	; 0x608 <__fp_nan>
 472:	0e f4       	brtc	.+2      	; 0x476 <__addsf3+0x1e>
 474:	e0 95       	com	r30
 476:	e7 fb       	bst	r30, 7
 478:	c1 c0       	rjmp	.+386    	; 0x5fc <__fp_inf>

0000047a <__addsf3x>:
 47a:	e9 2f       	mov	r30, r25
 47c:	e7 d0       	rcall	.+462    	; 0x64c <__fp_split3>
 47e:	80 f3       	brcs	.-32     	; 0x460 <__addsf3+0x8>
 480:	ba 17       	cp	r27, r26
 482:	62 07       	cpc	r22, r18
 484:	73 07       	cpc	r23, r19
 486:	84 07       	cpc	r24, r20
 488:	95 07       	cpc	r25, r21
 48a:	18 f0       	brcs	.+6      	; 0x492 <__addsf3x+0x18>
 48c:	71 f4       	brne	.+28     	; 0x4aa <__addsf3x+0x30>
 48e:	9e f5       	brtc	.+102    	; 0x4f6 <__addsf3x+0x7c>
 490:	ff c0       	rjmp	.+510    	; 0x690 <__fp_zero>
 492:	0e f4       	brtc	.+2      	; 0x496 <__addsf3x+0x1c>
 494:	e0 95       	com	r30
 496:	0b 2e       	mov	r0, r27
 498:	ba 2f       	mov	r27, r26
 49a:	a0 2d       	mov	r26, r0
 49c:	0b 01       	movw	r0, r22
 49e:	b9 01       	movw	r22, r18
 4a0:	90 01       	movw	r18, r0
 4a2:	0c 01       	movw	r0, r24
 4a4:	ca 01       	movw	r24, r20
 4a6:	a0 01       	movw	r20, r0
 4a8:	11 24       	eor	r1, r1
 4aa:	ff 27       	eor	r31, r31
 4ac:	59 1b       	sub	r21, r25
 4ae:	99 f0       	breq	.+38     	; 0x4d6 <__addsf3x+0x5c>
 4b0:	59 3f       	cpi	r21, 0xF9	; 249
 4b2:	50 f4       	brcc	.+20     	; 0x4c8 <__addsf3x+0x4e>
 4b4:	50 3e       	cpi	r21, 0xE0	; 224
 4b6:	68 f1       	brcs	.+90     	; 0x512 <__addsf3x+0x98>
 4b8:	1a 16       	cp	r1, r26
 4ba:	f0 40       	sbci	r31, 0x00	; 0
 4bc:	a2 2f       	mov	r26, r18
 4be:	23 2f       	mov	r18, r19
 4c0:	34 2f       	mov	r19, r20
 4c2:	44 27       	eor	r20, r20
 4c4:	58 5f       	subi	r21, 0xF8	; 248
 4c6:	f3 cf       	rjmp	.-26     	; 0x4ae <__addsf3x+0x34>
 4c8:	46 95       	lsr	r20
 4ca:	37 95       	ror	r19
 4cc:	27 95       	ror	r18
 4ce:	a7 95       	ror	r26
 4d0:	f0 40       	sbci	r31, 0x00	; 0
 4d2:	53 95       	inc	r21
 4d4:	c9 f7       	brne	.-14     	; 0x4c8 <__addsf3x+0x4e>
 4d6:	7e f4       	brtc	.+30     	; 0x4f6 <__addsf3x+0x7c>
 4d8:	1f 16       	cp	r1, r31
 4da:	ba 0b       	sbc	r27, r26
 4dc:	62 0b       	sbc	r22, r18
 4de:	73 0b       	sbc	r23, r19
 4e0:	84 0b       	sbc	r24, r20
 4e2:	ba f0       	brmi	.+46     	; 0x512 <__addsf3x+0x98>
 4e4:	91 50       	subi	r25, 0x01	; 1
 4e6:	a1 f0       	breq	.+40     	; 0x510 <__addsf3x+0x96>
 4e8:	ff 0f       	add	r31, r31
 4ea:	bb 1f       	adc	r27, r27
 4ec:	66 1f       	adc	r22, r22
 4ee:	77 1f       	adc	r23, r23
 4f0:	88 1f       	adc	r24, r24
 4f2:	c2 f7       	brpl	.-16     	; 0x4e4 <__addsf3x+0x6a>
 4f4:	0e c0       	rjmp	.+28     	; 0x512 <__addsf3x+0x98>
 4f6:	ba 0f       	add	r27, r26
 4f8:	62 1f       	adc	r22, r18
 4fa:	73 1f       	adc	r23, r19
 4fc:	84 1f       	adc	r24, r20
 4fe:	48 f4       	brcc	.+18     	; 0x512 <__addsf3x+0x98>
 500:	87 95       	ror	r24
 502:	77 95       	ror	r23
 504:	67 95       	ror	r22
 506:	b7 95       	ror	r27
 508:	f7 95       	ror	r31
 50a:	9e 3f       	cpi	r25, 0xFE	; 254
 50c:	08 f0       	brcs	.+2      	; 0x510 <__addsf3x+0x96>
 50e:	b3 cf       	rjmp	.-154    	; 0x476 <__addsf3+0x1e>
 510:	93 95       	inc	r25
 512:	88 0f       	add	r24, r24
 514:	08 f0       	brcs	.+2      	; 0x518 <__addsf3x+0x9e>
 516:	99 27       	eor	r25, r25
 518:	ee 0f       	add	r30, r30
 51a:	97 95       	ror	r25
 51c:	87 95       	ror	r24
 51e:	08 95       	ret

00000520 <__fixsfsi>:
 520:	04 d0       	rcall	.+8      	; 0x52a <__fixunssfsi>
 522:	68 94       	set
 524:	b1 11       	cpse	r27, r1
 526:	b5 c0       	rjmp	.+362    	; 0x692 <__fp_szero>
 528:	08 95       	ret

0000052a <__fixunssfsi>:
 52a:	98 d0       	rcall	.+304    	; 0x65c <__fp_splitA>
 52c:	88 f0       	brcs	.+34     	; 0x550 <__fixunssfsi+0x26>
 52e:	9f 57       	subi	r25, 0x7F	; 127
 530:	90 f0       	brcs	.+36     	; 0x556 <__fixunssfsi+0x2c>
 532:	b9 2f       	mov	r27, r25
 534:	99 27       	eor	r25, r25
 536:	b7 51       	subi	r27, 0x17	; 23
 538:	a0 f0       	brcs	.+40     	; 0x562 <__fixunssfsi+0x38>
 53a:	d1 f0       	breq	.+52     	; 0x570 <__fixunssfsi+0x46>
 53c:	66 0f       	add	r22, r22
 53e:	77 1f       	adc	r23, r23
 540:	88 1f       	adc	r24, r24
 542:	99 1f       	adc	r25, r25
 544:	1a f0       	brmi	.+6      	; 0x54c <__fixunssfsi+0x22>
 546:	ba 95       	dec	r27
 548:	c9 f7       	brne	.-14     	; 0x53c <__fixunssfsi+0x12>
 54a:	12 c0       	rjmp	.+36     	; 0x570 <__fixunssfsi+0x46>
 54c:	b1 30       	cpi	r27, 0x01	; 1
 54e:	81 f0       	breq	.+32     	; 0x570 <__fixunssfsi+0x46>
 550:	9f d0       	rcall	.+318    	; 0x690 <__fp_zero>
 552:	b1 e0       	ldi	r27, 0x01	; 1
 554:	08 95       	ret
 556:	9c c0       	rjmp	.+312    	; 0x690 <__fp_zero>
 558:	67 2f       	mov	r22, r23
 55a:	78 2f       	mov	r23, r24
 55c:	88 27       	eor	r24, r24
 55e:	b8 5f       	subi	r27, 0xF8	; 248
 560:	39 f0       	breq	.+14     	; 0x570 <__fixunssfsi+0x46>
 562:	b9 3f       	cpi	r27, 0xF9	; 249
 564:	cc f3       	brlt	.-14     	; 0x558 <__fixunssfsi+0x2e>
 566:	86 95       	lsr	r24
 568:	77 95       	ror	r23
 56a:	67 95       	ror	r22
 56c:	b3 95       	inc	r27
 56e:	d9 f7       	brne	.-10     	; 0x566 <__fixunssfsi+0x3c>
 570:	3e f4       	brtc	.+14     	; 0x580 <__fixunssfsi+0x56>
 572:	90 95       	com	r25
 574:	80 95       	com	r24
 576:	70 95       	com	r23
 578:	61 95       	neg	r22
 57a:	7f 4f       	sbci	r23, 0xFF	; 255
 57c:	8f 4f       	sbci	r24, 0xFF	; 255
 57e:	9f 4f       	sbci	r25, 0xFF	; 255
 580:	08 95       	ret

00000582 <__floatunsisf>:
 582:	e8 94       	clt
 584:	09 c0       	rjmp	.+18     	; 0x598 <__floatsisf+0x12>

00000586 <__floatsisf>:
 586:	97 fb       	bst	r25, 7
 588:	3e f4       	brtc	.+14     	; 0x598 <__floatsisf+0x12>
 58a:	90 95       	com	r25
 58c:	80 95       	com	r24
 58e:	70 95       	com	r23
 590:	61 95       	neg	r22
 592:	7f 4f       	sbci	r23, 0xFF	; 255
 594:	8f 4f       	sbci	r24, 0xFF	; 255
 596:	9f 4f       	sbci	r25, 0xFF	; 255
 598:	99 23       	and	r25, r25
 59a:	a9 f0       	breq	.+42     	; 0x5c6 <__floatsisf+0x40>
 59c:	f9 2f       	mov	r31, r25
 59e:	96 e9       	ldi	r25, 0x96	; 150
 5a0:	bb 27       	eor	r27, r27
 5a2:	93 95       	inc	r25
 5a4:	f6 95       	lsr	r31
 5a6:	87 95       	ror	r24
 5a8:	77 95       	ror	r23
 5aa:	67 95       	ror	r22
 5ac:	b7 95       	ror	r27
 5ae:	f1 11       	cpse	r31, r1
 5b0:	f8 cf       	rjmp	.-16     	; 0x5a2 <__floatsisf+0x1c>
 5b2:	fa f4       	brpl	.+62     	; 0x5f2 <__floatsisf+0x6c>
 5b4:	bb 0f       	add	r27, r27
 5b6:	11 f4       	brne	.+4      	; 0x5bc <__floatsisf+0x36>
 5b8:	60 ff       	sbrs	r22, 0
 5ba:	1b c0       	rjmp	.+54     	; 0x5f2 <__floatsisf+0x6c>
 5bc:	6f 5f       	subi	r22, 0xFF	; 255
 5be:	7f 4f       	sbci	r23, 0xFF	; 255
 5c0:	8f 4f       	sbci	r24, 0xFF	; 255
 5c2:	9f 4f       	sbci	r25, 0xFF	; 255
 5c4:	16 c0       	rjmp	.+44     	; 0x5f2 <__floatsisf+0x6c>
 5c6:	88 23       	and	r24, r24
 5c8:	11 f0       	breq	.+4      	; 0x5ce <__floatsisf+0x48>
 5ca:	96 e9       	ldi	r25, 0x96	; 150
 5cc:	11 c0       	rjmp	.+34     	; 0x5f0 <__floatsisf+0x6a>
 5ce:	77 23       	and	r23, r23
 5d0:	21 f0       	breq	.+8      	; 0x5da <__floatsisf+0x54>
 5d2:	9e e8       	ldi	r25, 0x8E	; 142
 5d4:	87 2f       	mov	r24, r23
 5d6:	76 2f       	mov	r23, r22
 5d8:	05 c0       	rjmp	.+10     	; 0x5e4 <__floatsisf+0x5e>
 5da:	66 23       	and	r22, r22
 5dc:	71 f0       	breq	.+28     	; 0x5fa <__floatsisf+0x74>
 5de:	96 e8       	ldi	r25, 0x86	; 134
 5e0:	86 2f       	mov	r24, r22
 5e2:	70 e0       	ldi	r23, 0x00	; 0
 5e4:	60 e0       	ldi	r22, 0x00	; 0
 5e6:	2a f0       	brmi	.+10     	; 0x5f2 <__floatsisf+0x6c>
 5e8:	9a 95       	dec	r25
 5ea:	66 0f       	add	r22, r22
 5ec:	77 1f       	adc	r23, r23
 5ee:	88 1f       	adc	r24, r24
 5f0:	da f7       	brpl	.-10     	; 0x5e8 <__floatsisf+0x62>
 5f2:	88 0f       	add	r24, r24
 5f4:	96 95       	lsr	r25
 5f6:	87 95       	ror	r24
 5f8:	97 f9       	bld	r25, 7
 5fa:	08 95       	ret

000005fc <__fp_inf>:
 5fc:	97 f9       	bld	r25, 7
 5fe:	9f 67       	ori	r25, 0x7F	; 127
 600:	80 e8       	ldi	r24, 0x80	; 128
 602:	70 e0       	ldi	r23, 0x00	; 0
 604:	60 e0       	ldi	r22, 0x00	; 0
 606:	08 95       	ret

00000608 <__fp_nan>:
 608:	9f ef       	ldi	r25, 0xFF	; 255
 60a:	80 ec       	ldi	r24, 0xC0	; 192
 60c:	08 95       	ret

0000060e <__fp_pscA>:
 60e:	00 24       	eor	r0, r0
 610:	0a 94       	dec	r0
 612:	16 16       	cp	r1, r22
 614:	17 06       	cpc	r1, r23
 616:	18 06       	cpc	r1, r24
 618:	09 06       	cpc	r0, r25
 61a:	08 95       	ret

0000061c <__fp_pscB>:
 61c:	00 24       	eor	r0, r0
 61e:	0a 94       	dec	r0
 620:	12 16       	cp	r1, r18
 622:	13 06       	cpc	r1, r19
 624:	14 06       	cpc	r1, r20
 626:	05 06       	cpc	r0, r21
 628:	08 95       	ret

0000062a <__fp_round>:
 62a:	09 2e       	mov	r0, r25
 62c:	03 94       	inc	r0
 62e:	00 0c       	add	r0, r0
 630:	11 f4       	brne	.+4      	; 0x636 <__fp_round+0xc>
 632:	88 23       	and	r24, r24
 634:	52 f0       	brmi	.+20     	; 0x64a <__fp_round+0x20>
 636:	bb 0f       	add	r27, r27
 638:	40 f4       	brcc	.+16     	; 0x64a <__fp_round+0x20>
 63a:	bf 2b       	or	r27, r31
 63c:	11 f4       	brne	.+4      	; 0x642 <__fp_round+0x18>
 63e:	60 ff       	sbrs	r22, 0
 640:	04 c0       	rjmp	.+8      	; 0x64a <__fp_round+0x20>
 642:	6f 5f       	subi	r22, 0xFF	; 255
 644:	7f 4f       	sbci	r23, 0xFF	; 255
 646:	8f 4f       	sbci	r24, 0xFF	; 255
 648:	9f 4f       	sbci	r25, 0xFF	; 255
 64a:	08 95       	ret

0000064c <__fp_split3>:
 64c:	57 fd       	sbrc	r21, 7
 64e:	90 58       	subi	r25, 0x80	; 128
 650:	44 0f       	add	r20, r20
 652:	55 1f       	adc	r21, r21
 654:	59 f0       	breq	.+22     	; 0x66c <__fp_splitA+0x10>
 656:	5f 3f       	cpi	r21, 0xFF	; 255
 658:	71 f0       	breq	.+28     	; 0x676 <__fp_splitA+0x1a>
 65a:	47 95       	ror	r20

0000065c <__fp_splitA>:
 65c:	88 0f       	add	r24, r24
 65e:	97 fb       	bst	r25, 7
 660:	99 1f       	adc	r25, r25
 662:	61 f0       	breq	.+24     	; 0x67c <__fp_splitA+0x20>
 664:	9f 3f       	cpi	r25, 0xFF	; 255
 666:	79 f0       	breq	.+30     	; 0x686 <__fp_splitA+0x2a>
 668:	87 95       	ror	r24
 66a:	08 95       	ret
 66c:	12 16       	cp	r1, r18
 66e:	13 06       	cpc	r1, r19
 670:	14 06       	cpc	r1, r20
 672:	55 1f       	adc	r21, r21
 674:	f2 cf       	rjmp	.-28     	; 0x65a <__fp_split3+0xe>
 676:	46 95       	lsr	r20
 678:	f1 df       	rcall	.-30     	; 0x65c <__fp_splitA>
 67a:	08 c0       	rjmp	.+16     	; 0x68c <__fp_splitA+0x30>
 67c:	16 16       	cp	r1, r22
 67e:	17 06       	cpc	r1, r23
 680:	18 06       	cpc	r1, r24
 682:	99 1f       	adc	r25, r25
 684:	f1 cf       	rjmp	.-30     	; 0x668 <__fp_splitA+0xc>
 686:	86 95       	lsr	r24
 688:	71 05       	cpc	r23, r1
 68a:	61 05       	cpc	r22, r1
 68c:	08 94       	sec
 68e:	08 95       	ret

00000690 <__fp_zero>:
 690:	e8 94       	clt

00000692 <__fp_szero>:
 692:	bb 27       	eor	r27, r27
 694:	66 27       	eor	r22, r22
 696:	77 27       	eor	r23, r23
 698:	cb 01       	movw	r24, r22
 69a:	97 f9       	bld	r25, 7
 69c:	08 95       	ret

0000069e <__mulsf3>:
 69e:	0b d0       	rcall	.+22     	; 0x6b6 <__mulsf3x>
 6a0:	c4 cf       	rjmp	.-120    	; 0x62a <__fp_round>
 6a2:	b5 df       	rcall	.-150    	; 0x60e <__fp_pscA>
 6a4:	28 f0       	brcs	.+10     	; 0x6b0 <__mulsf3+0x12>
 6a6:	ba df       	rcall	.-140    	; 0x61c <__fp_pscB>
 6a8:	18 f0       	brcs	.+6      	; 0x6b0 <__mulsf3+0x12>
 6aa:	95 23       	and	r25, r21
 6ac:	09 f0       	breq	.+2      	; 0x6b0 <__mulsf3+0x12>
 6ae:	a6 cf       	rjmp	.-180    	; 0x5fc <__fp_inf>
 6b0:	ab cf       	rjmp	.-170    	; 0x608 <__fp_nan>
 6b2:	11 24       	eor	r1, r1
 6b4:	ee cf       	rjmp	.-36     	; 0x692 <__fp_szero>

000006b6 <__mulsf3x>:
 6b6:	ca df       	rcall	.-108    	; 0x64c <__fp_split3>
 6b8:	a0 f3       	brcs	.-24     	; 0x6a2 <__mulsf3+0x4>

000006ba <__mulsf3_pse>:
 6ba:	95 9f       	mul	r25, r21
 6bc:	d1 f3       	breq	.-12     	; 0x6b2 <__mulsf3+0x14>
 6be:	95 0f       	add	r25, r21
 6c0:	50 e0       	ldi	r21, 0x00	; 0
 6c2:	55 1f       	adc	r21, r21
 6c4:	62 9f       	mul	r22, r18
 6c6:	f0 01       	movw	r30, r0
 6c8:	72 9f       	mul	r23, r18
 6ca:	bb 27       	eor	r27, r27
 6cc:	f0 0d       	add	r31, r0
 6ce:	b1 1d       	adc	r27, r1
 6d0:	63 9f       	mul	r22, r19
 6d2:	aa 27       	eor	r26, r26
 6d4:	f0 0d       	add	r31, r0
 6d6:	b1 1d       	adc	r27, r1
 6d8:	aa 1f       	adc	r26, r26
 6da:	64 9f       	mul	r22, r20
 6dc:	66 27       	eor	r22, r22
 6de:	b0 0d       	add	r27, r0
 6e0:	a1 1d       	adc	r26, r1
 6e2:	66 1f       	adc	r22, r22
 6e4:	82 9f       	mul	r24, r18
 6e6:	22 27       	eor	r18, r18
 6e8:	b0 0d       	add	r27, r0
 6ea:	a1 1d       	adc	r26, r1
 6ec:	62 1f       	adc	r22, r18
 6ee:	73 9f       	mul	r23, r19
 6f0:	b0 0d       	add	r27, r0
 6f2:	a1 1d       	adc	r26, r1
 6f4:	62 1f       	adc	r22, r18
 6f6:	83 9f       	mul	r24, r19
 6f8:	a0 0d       	add	r26, r0
 6fa:	61 1d       	adc	r22, r1
 6fc:	22 1f       	adc	r18, r18
 6fe:	74 9f       	mul	r23, r20
 700:	33 27       	eor	r19, r19
 702:	a0 0d       	add	r26, r0
 704:	61 1d       	adc	r22, r1
 706:	23 1f       	adc	r18, r19
 708:	84 9f       	mul	r24, r20
 70a:	60 0d       	add	r22, r0
 70c:	21 1d       	adc	r18, r1
 70e:	82 2f       	mov	r24, r18
 710:	76 2f       	mov	r23, r22
 712:	6a 2f       	mov	r22, r26
 714:	11 24       	eor	r1, r1
 716:	9f 57       	subi	r25, 0x7F	; 127
 718:	50 40       	sbci	r21, 0x00	; 0
 71a:	8a f0       	brmi	.+34     	; 0x73e <__mulsf3_pse+0x84>
 71c:	e1 f0       	breq	.+56     	; 0x756 <__mulsf3_pse+0x9c>
 71e:	88 23       	and	r24, r24
 720:	4a f0       	brmi	.+18     	; 0x734 <__mulsf3_pse+0x7a>
 722:	ee 0f       	add	r30, r30
 724:	ff 1f       	adc	r31, r31
 726:	bb 1f       	adc	r27, r27
 728:	66 1f       	adc	r22, r22
 72a:	77 1f       	adc	r23, r23
 72c:	88 1f       	adc	r24, r24
 72e:	91 50       	subi	r25, 0x01	; 1
 730:	50 40       	sbci	r21, 0x00	; 0
 732:	a9 f7       	brne	.-22     	; 0x71e <__mulsf3_pse+0x64>
 734:	9e 3f       	cpi	r25, 0xFE	; 254
 736:	51 05       	cpc	r21, r1
 738:	70 f0       	brcs	.+28     	; 0x756 <__mulsf3_pse+0x9c>
 73a:	60 cf       	rjmp	.-320    	; 0x5fc <__fp_inf>
 73c:	aa cf       	rjmp	.-172    	; 0x692 <__fp_szero>
 73e:	5f 3f       	cpi	r21, 0xFF	; 255
 740:	ec f3       	brlt	.-6      	; 0x73c <__mulsf3_pse+0x82>
 742:	98 3e       	cpi	r25, 0xE8	; 232
 744:	dc f3       	brlt	.-10     	; 0x73c <__mulsf3_pse+0x82>
 746:	86 95       	lsr	r24
 748:	77 95       	ror	r23
 74a:	67 95       	ror	r22
 74c:	b7 95       	ror	r27
 74e:	f7 95       	ror	r31
 750:	e7 95       	ror	r30
 752:	9f 5f       	subi	r25, 0xFF	; 255
 754:	c1 f7       	brne	.-16     	; 0x746 <__mulsf3_pse+0x8c>
 756:	fe 2b       	or	r31, r30
 758:	88 0f       	add	r24, r24
 75a:	91 1d       	adc	r25, r1
 75c:	96 95       	lsr	r25
 75e:	87 95       	ror	r24
 760:	97 f9       	bld	r25, 7
 762:	08 95       	ret

00000764 <__divmodhi4>:
 764:	97 fb       	bst	r25, 7
 766:	07 2e       	mov	r0, r23
 768:	16 f4       	brtc	.+4      	; 0x76e <__divmodhi4+0xa>
 76a:	00 94       	com	r0
 76c:	07 d0       	rcall	.+14     	; 0x77c <__divmodhi4_neg1>
 76e:	77 fd       	sbrc	r23, 7
 770:	09 d0       	rcall	.+18     	; 0x784 <__divmodhi4_neg2>
 772:	0e 94 c6 03 	call	0x78c	; 0x78c <__udivmodhi4>
 776:	07 fc       	sbrc	r0, 7
 778:	05 d0       	rcall	.+10     	; 0x784 <__divmodhi4_neg2>
 77a:	3e f4       	brtc	.+14     	; 0x78a <__divmodhi4_exit>

0000077c <__divmodhi4_neg1>:
 77c:	90 95       	com	r25
 77e:	81 95       	neg	r24
 780:	9f 4f       	sbci	r25, 0xFF	; 255
 782:	08 95       	ret

00000784 <__divmodhi4_neg2>:
 784:	70 95       	com	r23
 786:	61 95       	neg	r22
 788:	7f 4f       	sbci	r23, 0xFF	; 255

0000078a <__divmodhi4_exit>:
 78a:	08 95       	ret

0000078c <__udivmodhi4>:
 78c:	aa 1b       	sub	r26, r26
 78e:	bb 1b       	sub	r27, r27
 790:	51 e1       	ldi	r21, 0x11	; 17
 792:	07 c0       	rjmp	.+14     	; 0x7a2 <__udivmodhi4_ep>

00000794 <__udivmodhi4_loop>:
 794:	aa 1f       	adc	r26, r26
 796:	bb 1f       	adc	r27, r27
 798:	a6 17       	cp	r26, r22
 79a:	b7 07       	cpc	r27, r23
 79c:	10 f0       	brcs	.+4      	; 0x7a2 <__udivmodhi4_ep>
 79e:	a6 1b       	sub	r26, r22
 7a0:	b7 0b       	sbc	r27, r23

000007a2 <__udivmodhi4_ep>:
 7a2:	88 1f       	adc	r24, r24
 7a4:	99 1f       	adc	r25, r25
 7a6:	5a 95       	dec	r21
 7a8:	a9 f7       	brne	.-22     	; 0x794 <__udivmodhi4_loop>
 7aa:	80 95       	com	r24
 7ac:	90 95       	com	r25
 7ae:	bc 01       	movw	r22, r24
 7b0:	cd 01       	movw	r24, r26
 7b2:	08 95       	ret

000007b4 <_exit>:
 7b4:	f8 94       	cli

000007b6 <__stop_program>:
 7b6:	ff cf       	rjmp	.-2      	; 0x7b6 <__stop_program>
